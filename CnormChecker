#!/bin/python3

import sys
import os
import stat
import re
import getopt

VERSION = "0.0.3"
MAJOR = "major"
MINOR = "minor"
INFO = "info"

shortargs = "RDs"
longargs = ["recursive", "debug", "silent"]

p_err = "\033[1;31m[ERROR]\033[0m"
p_warn = "\033[1;33m[WARNING]\033[0m"
p_major = "\033[1;31m[MAJOR]\033[1m"
p_minor = "\033[1;32m[MINOR]\033[1m"
p_info = "\033[1;34m[INFO]\033[1m"


class Options(object):

    def __init__(self):
        super(Options, self).__init__()
        self.debug = False
        self.recursive = False
        self.silent = False


opt = Options()
files = []

def help():
    print("\033[0;36mCnormChecker\033[1;33m", VERSION, "\033[0m")
    print("\n\033[33mDEFAULT BEHAVIOR:\033[0m")
    print("\tCheck every files in the current folder recursively")
    print("\n\033[33mUSAGE:\033[0m")
    print("\t", sys.argv[0], "[OPTIONS] [FILES / FOLDERS]")
    print("\n\033[33mOPTIONS:\033[0m")
    print("\t\033[32m-h\033[0m,\033[32m--help\033[0m")
    print("\t\tPrint this help message.")
    print("\t\033[32m-v\033[0m,\033[32m--version\033[0m")
    print("\t\tShow version information.")
    print("\t\033[32m-s\033[0m,\033[32m--silent\033[0m")
    print("\t\tEnable silent mode.")
    print("\t\033[32m-D\033[0m,\033[32m--debug\033[0m")
    print("\t\tAdd some debug output.")
    print("\t\033[32m-R\033[0m,\033[32m--recursive\033[0m")
    print("\t\tEnable recursive mode.")
    print("\n\033[33mARGS:\033[0m")
    print("\t\033[32m<FILE>\033[0m")
    print("\t\tFile(s) to check.")
    print("\t\033[32m<FOLDER>\033[0m")
    print("\t\tFolder(s) that every files inside will be check.")
    print("\n© 2019 Louis Kleiver")

def version():
    print("\033[0;36mCnormChecker\033[1;33m", VERSION, "\033[0m")
    print("© 2019 Louis Kleiver")

def argError():
    print("\033[1;31mInvalid syntax :\033[0m")
    print("\tType '" + sys.argv[0] + " --help' for help.")
    exit(1)


class Error(object):

    def __init__(self, err, code, file, line, msg):
        super(Error, self).__init__()
        self.type = err
        self.code = code
        self.file = file
        self.line = (line + 1 if line else None)
        self.msg = msg
    
    def print(self):
        if self.type == "major":
            print(p_major, (self.code if self.code else ""))
        elif self.type == "minor":
            print(p_minor, (self.code if self.code else ""))
        elif self.type == "info":
            print(p_info, (self.code if self.code else ""))
        print(self.file + "\033[0m:" + (str(self.line) + ": " if self.line else " ") + self.msg + "\n")


class File(object):

    def __init__(self, path):
        self.path = path
        if not os.access(self.path, os.R_OK):
            print(p_warn, self.path + ": Cannot read this file")
            self.type = "Error"
        elif self.path.endswith("Makefile"):
            self.type = "M"
        elif self.path.endswith(".c"):
            self.type = "C"
        elif self.path.endswith(".h"):
            self.type = "H"
        else:
            self.type = "Unknown"
        if self.type != "Unknown" and self.type != "Error":
            with open(self.path, "r") as file:
                self.content = file.readlines()
        else:
            self.content = None
        self.errors = []
        self.check()
    
    def check(self):
        if not self.path.endswith("Makefile") and self.path != self.path.lower():
            self.errors.append(Error(MAJOR, "O4", self.path, None, "Folders names must respect the snake_case convention !"))
        if self.type == "C":
            self.checkC()
        elif self.type == "H":
            self.checkH()
        elif self.type == "M":
            self.checkM()
        else:
            self.errors.append(Error(MAJOR, "O1 / O2", self.path, None, "Unknown file type !"))
    
    def checkC(self):
        headersize = check_header(self, self.content, self.path)
        indent = []
        emptyLine = 0
        inBlockCounter = 0
        if getFuncNumber(self.content) > 5:
            self.errors.append(Error(MAJOR, "O3", self.path, None, "Too much functions in file !"))
        for lcount, line in enumerate(self.content):
            if lcount < headersize:
                continue
            elif lcount == headersize and line != "\n":
                self.errors.append(Error(INFO, None, self.path, lcount, "Missing new line after header !"))
            elif lcount == headersize:
                continue
            if len(line) > 80:
                self.errors.append(Error(MAJOR, "F3", self.path, lcount, "The length of a line should not exceed 80 columns"))
            if emptyLine == 1:
                if line != "\n":
                    self.errors.append(Error(MINOR, "G2", self.path, lcount, "One and only one empty line should separate the implementation of functions"))
                emptyLine = 0
            elif emptyLine == 2:
                emptyLine = 0
            elif line == "\n":
                self.errors.append(Error(MINOR, "G2", self.path, lcount, "One and only one empty line should separate the implementation of functions"))
            if re.search(".*\}.*", line) and not re.search(".*\{.*", line):
                indent.pop()
                if len(indent) == 0:
                    emptyLine = 1
            elif len(indent) == 0 and re.search("\#.*", line):
                emptyLine = 2
            if len(indent) == 0 and line != "" and re.search("^ ", line):
                self.errors.append(Error(MINOR, "L2", self.path, lcount, "Bad indentation"))
            elif len(indent) > 0 and line != "" and not re.search("^(    ){" + str(len(indent)) + "}\S+.*", line):
                self.errors.append(Error(MINOR, "L2", self.path, lcount, "Bad indentation"))
            if len(indent) > 0 and (re.search(".*\/\/.*", line) or re.search(".*\/\*.*", line)):
                self.errors.append(Error(MINOR, "F6", self.path, lcount, "There should be no comment inside a function"))
            if re.search(".*\{.*", line) and not re.search(".*\}.*", line):
                indent.append("block")
                if len(indent) > 3:
                    self.errors.append(Error(MINOR, "C1", self.path, lcount, "Conditional branching"))
            elif re.search(".*for.*", line) or re.search(".*while.*", line) or re.search(".*if.*", line) or re.search(".*else if.*", line) or re.search(".*else.*", line):
                indent.append("once")
                if len(indent) > 3:
                    self.errors.append(Error(MINOR, "C1", self.path, lcount, "Conditional branching"))
            elif len(indent) > 0 and indent[len(indent) - 1] == "once":
                while indent[len(indent) - 1] == "once":
                    indent.pop()
            if len(indent) > 0:
                inBlockCounter += 1
            else:
                inBlockCounter = 0
            if inBlockCounter == 22:
                self.errors.append(Error(MAJOR, "F4", self.path, lcount, "Too much lines in function !"))
            elif inBlockCounter > 22 and not (inBlockCounter - 2) % 5:
                self.errors.append(Error(MAJOR, "F4", self.path, lcount, "Too much lines in function (" + str(inBlockCounter - 1) + ") !"))

    def checkH(self):
        print(self.path + ": Header files not handeled for now !\n")
    
    def checkM(self):
        print(self.path + ": Makefiles not handeled for now !\n")


def check_header(st, file, path):
    lcount = 0
    for line in file:
        if lcount == 0 and not re.search("^\/\*$", line):
            st.errors.append(Error(MAJOR, "G1", path, lcount, "Invalid file header !"))
            break
        elif lcount == 1 and not re.search("^\*\* EPITECH PROJECT, (\d)+$", line):
            st.errors.append(Error(MAJOR, "G1", path, lcount, "Invalid file header !"))
            break
        elif lcount == 2 and not re.search("^\*\* .+$", line):
            st.errors.append(Error(MAJOR, "G1", path, lcount, "Invalid file header !"))
            break
        elif lcount == 3 and not re.search("^\*\* File description:$", line):
            st.errors.append(Error(MAJOR, "G1", path, lcount, "Invalid file header !"))
            break
        elif lcount == 4 and not re.search("^\*\* .+$", line):
            st.errors.append(Error(MAJOR, "G1", path, lcount, "Invalid file header !"))
            break
        elif lcount == 5 and not re.search("^\*\/$", line):
            st.errors.append(Error(MAJOR, "G1", path, lcount, "Invalid file header !"))
            break
        elif lcount == 6:
            return lcount
        lcount += 1
    return lcount

def getFuncNumber(string):
    tmp = 0
    counter = 0
    for line in string:
        if (re.search(".*\(.*\)$", line)):
            tmp = 1
        elif tmp == 1 and line == "{":
            tmp = 0
            counter += 1
    return counter

def readFile(file):
    try:
        md = os.stat(file).st_mode
    except:
        print(p_err, file + ": No such file or directory")
        exit(2)
    if stat.S_ISDIR(md):
        readFolder(file)
    elif stat.S_ISREG(md):
        files.append(File(file))
    else:
        print(p_err, file + ": Invalid file")

def readFolder(path):
    if not os.access(path, os.R_OK):
        print(p_warn, path + ": Cannot open this folder")
        return
    for element in os.listdir(path):
        if opt.recursive and os.path.isdir(element) and not element.startswith(".") and element != "bonus":
            readFolder(path + "/" + element)
        elif not element.startswith("."):
            files.append(File(path + "/" + element))

def endprint():
    major_nb = 0
    minor_nb = 0
    info_nb = 0
    for file in files:
        for error in file.errors:
            if error.type == MAJOR:
                major_nb += 1
                if not opt.silent and opt.debug:
                    file.content[error.line - 1] = "\033[1;31m" + ("#" if file.content[error.line - 1] == "\n" else "") + file.content[error.line - 1] + "\033[0m"
            elif error.type == MINOR:
                minor_nb += 1
                if not opt.silent and opt.debug:
                    file.content[error.line - 1] = "\033[1;32m" + ("#" if file.content[error.line - 1] == "\n" else "") + file.content[error.line - 1] + "\033[0m"
            elif error.type == INFO:
                info_nb += 1
                if not opt.silent and opt.debug:
                    file.content[error.line - 1] = "\033[1;34m" + ("#" if file.content[error.line - 1] == "\n" else "") + file.content[error.line - 1] + "\033[0m"
        if not opt.silent and opt.debug:
            print(file.path + ":")
            print("---------------------------------------------------------------------------")
            for line in file.content:
                print(line, end="")
            print("\n---------------------------------------------------------------------------\n")
        for error in file.errors:
            error.print()
    print("\033[1;31m[MAJOR]\033[0m " + str(major_nb) + " | \033[1;32m[MINOR]\033[0m " + str(minor_nb) + " | \033[1;34m[INFO]\033[0m " + str(info_nb))

def main():
    args = sys.argv.copy()
    args.pop(0)
    try:
        optlist, args = getopt.getopt(args, shortargs, longargs)
    except:
        argError()
    Rfiles = []
    if len(args) <= 0:
        Rfiles.append(".")
        opt.recursive = True
    else:
        for arg in args:
            Rfiles.append(arg)
        for optelement in optlist:
            if (optelement[0] == "-R" or optelement[0] =="--recursive") and not optelement[1]:
                opt.recursive = True
            elif (optelement[0] == "-D" or optelement[0] =="--debug") and not optelement[1]:
                opt.debug = True
            elif (optelement[0] == "-s" or optelement[0] =="--silent") and not optelement[1]:
                opt.silent = True
            else:
                argError()
    for file in Rfiles:
        readFile(file)
    print()
    endprint()

if __name__ == "__main__":
    if len(sys.argv) == 2:
        if sys.argv[1] == "-h" or sys.argv[1] == "--help":
            help()
            exit(0)
        elif sys.argv[1] == "-v" or sys.argv[1] == "--version":
            version()
            exit(0)
    main()